import boto3
from botocore.exceptions import ClientError

# Initialize boto3 clients
org_client = boto3.client('organizations')
iam_client = boto3.client('iam')

# Exhaustive list of AWS services as of the most recent update
aws_services = [
    "acm", "a4b", "accessanalyzer", "account", "amplify", "apigateway", "appconfig", "appflow",
    "application-autoscaling", "application-insights", "appmesh", "appstream", "appsync", 
    "athena", "autoscaling", "autoscaling-plans", "backup", "batch", "budgets", "ce", "chime",
    "cloud9", "clouddirectory", "cloudformation", "cloudfront", "cloudhsm", "cloudsearch", 
    "cloudtrail", "cloudwatch", "codeartifact", "codebuild", "codecommit", "codedeploy", 
    "codeguru-reviewer", "codepipeline", "codestar", "codestar-connections", "cognito-identity",
    "cognito-idp", "cognito-sync", "comprehend", "comprehendmedical", "config", "connect",
    "cur", "customer-profiles", "databrew", "dataexchange", "datapipeline", "datasync", 
    "dax", "detective", "devicefarm", "devops-guru", "directconnect", "discovery", "dlm",
    "dms", "docdb", "ds", "dynamodb", "dynamodbstreams", "ebs", "ec2", "ec2-instance-connect",
    "ecr", "ecs", "eks", "elasticache", "elasticbeanstalk", "elasticfilesystem", "elastic-inference",
    "elasticloadbalancing", "elasticmapreduce", "elastictranscoder", "email", "emr", "es",
    "events", "evidently", "finspace", "fms", "forecast", "frauddetector", "fsx", "gamelift",
    "geo", "glacier", "globalaccelerator", "glue", "grafana", "greengrass", "groundstation",
    "guardduty", "health", "honeycode", "iam", "identitystore", "imagebuilder", "importexport",
    "inspector", "iot", "iotanalytics", "iot1click", "iotevents", "iotfleethub", "iotjobsdataplane",
    "iotsecuretunneling", "iotsitewise", "iotthingsgraph", "iotwireless", "ivs", "kafka", "kendra",
    "keyspaces", "kinesis", "kinesisanalytics", "kinesisvideo", "kms", "lakeformation",
    "lambda", "lex", "license-manager", "lightsail", "location", "logs", "lookoutequipment",
    "lookoutmetrics", "lookoutvision", "machinelearning", "macie", "managedblockchain",
    "marketplace-entitlement", "mediaconnect", "mediaconvert", "medialive", "mediapackage",
    "mediastore", "mediatailor", "memorydb", "meteringmarketplace", "mgh", "mgn", "migrationhubstrategy",
    "mobile", "mq", "mturk", "neptune", "network-firewall", "networkmanager", "nimble", "opsworks",
    "organizations", "outposts", "panorama", "personalize", "pi", "pinpoint", "polly", "pricing",
    "proton", "qldb", "quicksight", "ram", "rds", "redshift", "rekognition", "resiliencehub",
    "resource-explorer", "resource-groups", "robomaker", "route53", "route53domains", "route53resolver",
    "s3", "s3control", "s3outposts", "sagemaker", "savingsplans", "schemas", "secretsmanager",
    "securityhub", "serverlessrepo", "servicecatalog", "servicequotas", "ses", "shield", "signer",
    "sms", "sns", "sqs", "ssm", "sso", "states", "storagegateway", "sts", "support", "swf",
    "synthetics", "tagging", "textract", "timestream", "transcribe", "transfer", "translate",
    "trustedadvisor", "voiceid", "waf", "wafv2", "wellarchitected", "wisdom", "workdocs",
    "worklink", "workmail", "workspaces", "xray"
]

def get_active_scp_policies():
    try:
        # List all policies in the AWS Organization
        scps = org_client.list_policies(Filter='SERVICE_CONTROL_POLICY')['Policies']
        active_scps = [scp for scp in scps if scp['PolicySummary']['Status'] == 'ACTIVE']
        return active_scps
    except ClientError as e:
        print(f"Error retrieving SCPs: {e}")
        return []

def get_aws_services_blocked_by_scp(scps):
    blocked_services = []
    for scp in scps:
        scp_id = scp['Id']
        scp_details = org_client.describe_policy(PolicyId=scp_id)
        statements = scp_details['Policy']['Content']

        for service in aws_services:
            if service in statements and "Deny" in statements[service]:
                blocked_services.append(service)

    return blocked_services

def list_iam_access_restrictions():
    # This part could be used to analyze IAM policies
    pass

def main():
    scps = get_active_scp_policies()
    if not scps:
        print("No active SCPs found or failed to retrieve SCPs.")
        return

    blocked_services = get_aws_services_blocked_by_scp(scps)
    if blocked_services:
        print("The following AWS services are blocked by SCPs in your account:")
        for service in blocked_services:
            print(f"- {service}")
    else:
        print("No AWS services are blocked by SCPs in your account.")

if __name__ == "__main__":
    main()
